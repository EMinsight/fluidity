name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:

  build:
    name: ${{ matrix.name }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        name: [ "Build Bionic", "Build Focal", "Build Groovy" ]
        include:
        
          - name: "Build Bionic"
            release: bionic
    
          - name: "Build Focal"
            release: focal
    
          - name: "Build Groovy"
            release: groovy
    
    steps:

      - name: Check Out Repo 
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/actions/Dockerfile.actions.${{ matrix.release }}
          push: true
          tags: fluidity/actions:${{ matrix.release }}-${{ github.sha }}

  testing:

    name: ${{ matrix.name }}
    runs-on: ubuntu-latest
    needs: build
    if: always()

    strategy:
      fail-fast: false
      matrix:
        name: [ "Unit Bionic", "Short Bionic", "Medium Bionic", "Unit Focal", "Short Focal", "Medium Focal", "Unit Groovy", "Short Groovy", "Medium Groovy" ]
        include:
        
          - name: "Unit Bionic"
            release: bionic
            command: "make unittest"
            output: "test_results_unittests.xml"
          
          - name: "Short Bionic"
            release: bionic
            command: "make THREADS=2 test"
            output: "test_results.xml"

          - name: "Medium Bionic"
            release: bionic
            command: "make THREADS=2 mediumtest"
            output: "test_results_medium.xml"

          - name: "Unit Focal"
            release: focal
            command: "make unittest"
            output: "test_results_unittests.xml"
          
          - name: "Short Focal"
            release: focal
            command: "make THREADS=2 test"
            output: "test_results.xml"

          - name: "Medium Focal"
            release: focal
            command: "make THREADS=2 mediumtest"
            output: "test_results_medium.xml"

          - name: "Unit Groovy"
            release: groovy
            command: "make unittest"
            output: "test_results_unittests.xml"
          
          - name: "Short Groovy"
            release: groovy
            command: "make THREADS=2 test"
            output: "test_results.xml"

          - name: "Medium Groovy"
            release: groovy
            command: "make THREADS=2 mediumtest"
            output: "test_results_medium.xml"

    steps:

      - name: ${{ matrix.name }} Testing
        run: |
         chmod 777 .
         docker pull fluidity/actions:${{ matrix.release }}-${{ github.sha }}
         docker run -v $PWD:/host fluidity/actions:${{ matrix.release }}-${{ github.sha }} /bin/bash -c "${{ matrix.command }} && cp -v tests/${{ matrix.output }} /host/${{ matrix.release }}-${{ matrix.output}}"

      - uses: actions/upload-artifact@v2
        with:
          path: ${{ matrix.release }}-${{ matrix.output }}
          name: tests_xml_outputs

      - name: ${{ matrix.name }} JUnit
        uses: mikepenz/action-junit-report@v2
        with:
          report_paths: ${{ matrix.release }}-${{ matrix.output }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          check_name: Test report ${{ matrix.name }}
          fail_on_failure: true

  longtesting:

    name: longtest-${{ matrix.name }}
    runs-on: ubuntu-latest
    needs: build
    if: always()

    strategy:
      fail-fast: false
      matrix:
        name: ["mphase_tephra_settling_2d_adaptive",
               "gyre_parallel",
               "Stokes_square_convection_1e4_vv_p1p1",
               "Stokes_square_convection_1e4_p1p1_Ra_Test",
               "Stokes_square_convection_1e4_vv_gauss_p2p1", 
               "viscous_fs_drunkensailor",
               "cylinder-3d-drag",
               "viscosity_2d_p0_adaptive_parallel",
               "circle-2d-drag",
               "mphase_tephra_settling_3d",
               "tidal_diagnostics"]

    steps:

      - name: ${{ matrix.name }} Longtesting
        run: |
         chmod 777 .
         docker pull fluidity/actions:focal-${{ github.sha }}
         docker run -v $PWD:/host fluidity/actions:bionic-${{ github.sha }} /bin/bash -c "git clone https://github.com/fluidityproject/longtests && bin/testharness -x test_results_${{ matrix.name }}.xml -f ${{ matrix.name }}.xml && cp -v test_results_${{ matrix.name }}.xml /host"

      - uses: actions/upload-artifact@v2
        with:
          path: test_results_${{ matrix.name }}.xml
          name: tests_xml_outputs

      - name: ${{ matrix.name }} JUnit
        uses: mikepenz/action-junit-report@v2
        with:
          report_paths: test_results_${{ matrix.name }}.xml
          github_token: ${{ secrets.GITHUB_TOKEN }}
          check_name: Longtest report ${{ matrix.name }}
          fail_on_failure: true
